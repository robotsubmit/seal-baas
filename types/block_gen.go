package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Block) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "header":
			err = z.Header.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "txs":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Txs) >= int(zb0002) {
				z.Txs = (z.Txs)[:zb0002]
			} else {
				z.Txs = make([]Transaction, zb0002)
			}
			for za0001 := range z.Txs {
				err = z.Txs[za0001].DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "sig":
			z.Signature, err = dc.ReadBytes(z.Signature)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Block) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "header"
	err = en.Append(0x83, 0xa6, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.Header.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "txs"
	err = en.Append(0xa3, 0x74, 0x78, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Txs)))
	if err != nil {
		return
	}
	for za0001 := range z.Txs {
		err = z.Txs[za0001].EncodeMsg(en)
		if err != nil {
			return
		}
	}
	// write "sig"
	err = en.Append(0xa3, 0x73, 0x69, 0x67)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Signature)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Block) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "header"
	o = append(o, 0x83, 0xa6, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72)
	o, err = z.Header.MarshalMsg(o)
	if err != nil {
		return
	}
	// string "txs"
	o = append(o, 0xa3, 0x74, 0x78, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Txs)))
	for za0001 := range z.Txs {
		o, err = z.Txs[za0001].MarshalMsg(o)
		if err != nil {
			return
		}
	}
	// string "sig"
	o = append(o, 0xa3, 0x73, 0x69, 0x67)
	o = msgp.AppendBytes(o, z.Signature)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Block) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "header":
			bts, err = z.Header.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case "txs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.Txs) >= int(zb0002) {
				z.Txs = (z.Txs)[:zb0002]
			} else {
				z.Txs = make([]Transaction, zb0002)
			}
			for za0001 := range z.Txs {
				bts, err = z.Txs[za0001].UnmarshalMsg(bts)
				if err != nil {
					return
				}
			}
		case "sig":
			z.Signature, bts, err = msgp.ReadBytesBytes(bts, z.Signature)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Block) Msgsize() (s int) {
	s = 1 + 7 + z.Header.Msgsize() + 4 + msgp.ArrayHeaderSize
	for za0001 := range z.Txs {
		s += z.Txs[za0001].Msgsize()
	}
	s += 4 + msgp.BytesPrefixSize + len(z.Signature)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Header) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ChainID, err = dc.ReadByte()
			if err != nil {
				return
			}
		case "parent":
			err = z.ParentHash.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "txRoot":
			err = z.TxRootHash.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "height":
			z.Height, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "nonce":
			z.Nonce, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "time":
			z.Timestamp, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Header) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "id"
	err = en.Append(0x86, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteByte(z.ChainID)
	if err != nil {
		return
	}
	// write "parent"
	err = en.Append(0xa6, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = z.ParentHash.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "txRoot"
	err = en.Append(0xa6, 0x74, 0x78, 0x52, 0x6f, 0x6f, 0x74)
	if err != nil {
		return
	}
	err = z.TxRootHash.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "height"
	err = en.Append(0xa6, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Height)
	if err != nil {
		return
	}
	// write "nonce"
	err = en.Append(0xa5, 0x6e, 0x6f, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Nonce)
	if err != nil {
		return
	}
	// write "time"
	err = en.Append(0xa4, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Timestamp)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Header) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "id"
	o = append(o, 0x86, 0xa2, 0x69, 0x64)
	o = msgp.AppendByte(o, z.ChainID)
	// string "parent"
	o = append(o, 0xa6, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74)
	o, err = z.ParentHash.MarshalMsg(o)
	if err != nil {
		return
	}
	// string "txRoot"
	o = append(o, 0xa6, 0x74, 0x78, 0x52, 0x6f, 0x6f, 0x74)
	o, err = z.TxRootHash.MarshalMsg(o)
	if err != nil {
		return
	}
	// string "height"
	o = append(o, 0xa6, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint64(o, z.Height)
	// string "nonce"
	o = append(o, 0xa5, 0x6e, 0x6f, 0x6e, 0x63, 0x65)
	o = msgp.AppendUint64(o, z.Nonce)
	// string "time"
	o = append(o, 0xa4, 0x74, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.Timestamp)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Header) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ChainID, bts, err = msgp.ReadByteBytes(bts)
			if err != nil {
				return
			}
		case "parent":
			bts, err = z.ParentHash.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case "txRoot":
			bts, err = z.TxRootHash.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case "height":
			z.Height, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				return
			}
		case "nonce":
			z.Nonce, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				return
			}
		case "time":
			z.Timestamp, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Header) Msgsize() (s int) {
	s = 1 + 3 + msgp.ByteSize + 7 + z.ParentHash.Msgsize() + 7 + z.TxRootHash.Msgsize() + 7 + msgp.Uint64Size + 6 + msgp.Uint64Size + 5 + msgp.Int64Size
	return
}
